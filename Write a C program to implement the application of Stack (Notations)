#include <stdio.h>
#include <ctype.h>   // for isdigit, isalpha
#include <stdlib.h>  // for exit
#include <string.h>

#define MAX 100

char stack[MAX];
int top = -1;

// Stack operations for characters
void push(char c) {
    if (top == MAX - 1) {
        printf("Stack Overflow\n");
        return;
    }
    stack[++top] = c;
}

char pop() {
    if (top == -1) {
        return -1;
    }
    return stack[top--];
}

char peek() {
    if (top == -1) return -1;
    return stack[top];
}

// Function to return precedence of operators
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

// Infix to Postfix conversion
void infixToPostfix(char infix[], char postfix[]) {
    int i, k = 0;
    char symbol, temp;

    for (i = 0; infix[i] != '\0'; i++) {
        symbol = infix[i];

        if (isalnum(symbol)) {  // operand
            postfix[k++] = symbol;
        }
        else if (symbol == '(') {
            push(symbol);
        }
        else if (symbol == ')') {
            while ((temp = pop()) != '(') {
                postfix[k++] = temp;
            }
        }
        else {  // operator
            while (precedence(peek()) >= precedence(symbol)) {
                postfix[k++] = pop();
            }
            push(symbol);
        }
    }

    while (top != -1) {
        postfix[k++] = pop();
    }

    postfix[k] = '\0';
}

// Evaluate Postfix expression
int evaluatePostfix(char postfix[]) {
    int stackEval[MAX], topEval = -1;
    int i, op1, op2;

    for (i = 0; postfix[i] != '\0'; i++) {
        char symbol = postfix[i];

        if (isdigit(symbol)) {
            stackEval[++topEval] = symbol - '0'; // convert char to int
        }
        else {
            op2 = stackEval[topEval--];
            op1 = stackEval[topEval--];

            switch (symbol) {
                case '+': stackEval[++topEval] = op1 + op2; break;
                case '-': stackEval[++topEval] = op1 - op2; break;
                case '*': stackEval[++topEval] = op1 * op2; break;
                case '/': stackEval[++topEval] = op1 / op2; break;
            }
        }
    }

    return stackEval[topEval];
}

int main() {
    char infix[MAX], postfix[MAX];

    printf("Enter Infix Expression (operands should be single digit): ");
    scanf("%s", infix);

    infixToPostfix(infix, postfix);

    printf("Postfix Expression: %s\n", postfix);
    printf("Evaluated Result: %d\n", evaluatePostfix(postfix));

    return 0;
}
